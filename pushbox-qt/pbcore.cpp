#include "pbcore.h"
/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package command-line-arguments */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h> /* for ptrdiff_t below */

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */




/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef __SIZE_TYPE__ GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern __declspec(dllexport) void Go2cppFn_Go2Cpp_GetStageMax(char* in, int inLen, char** out, int* outLen);
extern __declspec(dllexport) void Go2cppFn_Go2Cpp_SetStage(char* in, int inLen, char** out, int* outLen);
extern __declspec(dllexport) void Go2cppFn_Go2Cpp_GetDataForQt(char* in, int inLen, char** out, int* outLen);
extern __declspec(dllexport) void Go2cppFn_Go2Cpp_DoAction(char* in, int inLen, char** out, int* outLen);
extern __declspec(dllexport) void Go2cppFn_Go2Cpp_GetIsGamePass(char* in, int inLen, char** out, int* outLen);

#ifdef __cplusplus
}
#endif


int32_t Go2Cpp_GetStageMax(){
	std::string in;
	char *out = NULL;
	int outLen = 0;
	Go2cppFn_Go2Cpp_GetStageMax((char *)in.data(), in.length(), &out, &outLen);
	int32_t retValue;
	int outIdx = 0;
	{
		uint32_t tmp2 = uint32_t(uint8_t(out[outIdx+0]) << 24);
		uint32_t tmp3 = uint32_t(uint8_t(out[outIdx+1]) << 16);
		uint32_t tmp4 = uint32_t(uint8_t(out[outIdx+2]) << 8);
		uint32_t tmp5 = uint32_t(uint8_t(out[outIdx+3]) << 0);
		retValue = tmp2 | tmp3 | tmp4 | tmp5;
		outIdx+=4;
	}
	if (out != NULL) {
		free(out);
	}
	return retValue;
}

void Go2Cpp_SetStage(int32_t in0){
	std::string in;
	{
		char tmp2[4];
		tmp2[0] = (uint32_t(in0) >> 24) & 0xFF;
		tmp2[1] = (uint32_t(in0) >> 16) & 0xFF;
		tmp2[2] = (uint32_t(in0) >> 8) & 0xFF;
		tmp2[3] = (uint32_t(in0) >> 0) & 0xFF;
		in.append(tmp2, 4);
	}
	char *out = NULL;
	int outLen = 0;
	Go2cppFn_Go2Cpp_SetStage((char *)in.data(), in.length(), &out, &outLen);
	if (out != NULL) {
		free(out);
	}
}

PushBoxMap Go2Cpp_GetDataForQt(){
	std::string in;
	char *out = NULL;
	int outLen = 0;
	Go2cppFn_Go2Cpp_GetDataForQt((char *)in.data(), in.length(), &out, &outLen);
	PushBoxMap retValue;
	int outIdx = 0;
	{
		{
			uint32_t tmp19 = uint32_t(uint8_t(out[outIdx+0]) << 24);
			uint32_t tmp20 = uint32_t(uint8_t(out[outIdx+1]) << 16);
			uint32_t tmp21 = uint32_t(uint8_t(out[outIdx+2]) << 8);
			uint32_t tmp22 = uint32_t(uint8_t(out[outIdx+3]) << 0);
			retValue.Stage = tmp19 | tmp20 | tmp21 | tmp22;
			outIdx+=4;
		}
		{
			uint32_t tmp23 = uint32_t(uint8_t(out[outIdx+0]) << 24);
			uint32_t tmp24 = uint32_t(uint8_t(out[outIdx+1]) << 16);
			uint32_t tmp25 = uint32_t(uint8_t(out[outIdx+2]) << 8);
			uint32_t tmp26 = uint32_t(uint8_t(out[outIdx+3]) << 0);
			retValue.MapMaxY = tmp23 | tmp24 | tmp25 | tmp26;
			outIdx+=4;
		}
		{
			uint32_t tmp27 = uint32_t(uint8_t(out[outIdx+0]) << 24);
			uint32_t tmp28 = uint32_t(uint8_t(out[outIdx+1]) << 16);
			uint32_t tmp29 = uint32_t(uint8_t(out[outIdx+2]) << 8);
			uint32_t tmp30 = uint32_t(uint8_t(out[outIdx+3]) << 0);
			retValue.MapMaxX = tmp27 | tmp28 | tmp29 | tmp30;
			outIdx+=4;
		}
		{
			uint32_t tmp31 = 0;
			uint32_t tmp32 = uint32_t(uint8_t(out[outIdx+0]) << 24);
			uint32_t tmp33 = uint32_t(uint8_t(out[outIdx+1]) << 16);
			uint32_t tmp34 = uint32_t(uint8_t(out[outIdx+2]) << 8);
			uint32_t tmp35 = uint32_t(uint8_t(out[outIdx+3]) << 0);
			tmp31 = tmp32 | tmp33 | tmp34 | tmp35;
			outIdx+=4;
			retValue.LastAction = std::string(out+outIdx, out+outIdx+tmp31);
			outIdx+=tmp31;
		}
		{
			uint32_t tmp36 = 0;
			uint32_t tmp37 = uint32_t(uint8_t(out[outIdx+0]) << 24);
			uint32_t tmp38 = uint32_t(uint8_t(out[outIdx+1]) << 16);
			uint32_t tmp39 = uint32_t(uint8_t(out[outIdx+2]) << 8);
			uint32_t tmp40 = uint32_t(uint8_t(out[outIdx+3]) << 0);
			tmp36 = tmp37 | tmp38 | tmp39 | tmp40;
			outIdx+=4;
			for (uint32_t tmp41 = 0; tmp41 < tmp36; tmp41++) {
				Point tmp42;
				{
					{
						uint32_t tmp43 = uint32_t(uint8_t(out[outIdx+0]) << 24);
						uint32_t tmp44 = uint32_t(uint8_t(out[outIdx+1]) << 16);
						uint32_t tmp45 = uint32_t(uint8_t(out[outIdx+2]) << 8);
						uint32_t tmp46 = uint32_t(uint8_t(out[outIdx+3]) << 0);
						tmp42.X = tmp43 | tmp44 | tmp45 | tmp46;
						outIdx+=4;
					}
					{
						uint32_t tmp47 = uint32_t(uint8_t(out[outIdx+0]) << 24);
						uint32_t tmp48 = uint32_t(uint8_t(out[outIdx+1]) << 16);
						uint32_t tmp49 = uint32_t(uint8_t(out[outIdx+2]) << 8);
						uint32_t tmp50 = uint32_t(uint8_t(out[outIdx+3]) << 0);
						tmp42.Y = tmp47 | tmp48 | tmp49 | tmp50;
						outIdx+=4;
					}
				}
				retValue.Tree.push_back(tmp42);
			}
		}
		{
			uint32_t tmp51 = 0;
			uint32_t tmp52 = uint32_t(uint8_t(out[outIdx+0]) << 24);
			uint32_t tmp53 = uint32_t(uint8_t(out[outIdx+1]) << 16);
			uint32_t tmp54 = uint32_t(uint8_t(out[outIdx+2]) << 8);
			uint32_t tmp55 = uint32_t(uint8_t(out[outIdx+3]) << 0);
			tmp51 = tmp52 | tmp53 | tmp54 | tmp55;
			outIdx+=4;
			for (uint32_t tmp56 = 0; tmp56 < tmp51; tmp56++) {
				Point tmp57;
				{
					{
						uint32_t tmp58 = uint32_t(uint8_t(out[outIdx+0]) << 24);
						uint32_t tmp59 = uint32_t(uint8_t(out[outIdx+1]) << 16);
						uint32_t tmp60 = uint32_t(uint8_t(out[outIdx+2]) << 8);
						uint32_t tmp61 = uint32_t(uint8_t(out[outIdx+3]) << 0);
						tmp57.X = tmp58 | tmp59 | tmp60 | tmp61;
						outIdx+=4;
					}
					{
						uint32_t tmp62 = uint32_t(uint8_t(out[outIdx+0]) << 24);
						uint32_t tmp63 = uint32_t(uint8_t(out[outIdx+1]) << 16);
						uint32_t tmp64 = uint32_t(uint8_t(out[outIdx+2]) << 8);
						uint32_t tmp65 = uint32_t(uint8_t(out[outIdx+3]) << 0);
						tmp57.Y = tmp62 | tmp63 | tmp64 | tmp65;
						outIdx+=4;
					}
				}
				retValue.Box.push_back(tmp57);
			}
		}
		{
			uint32_t tmp66 = 0;
			uint32_t tmp67 = uint32_t(uint8_t(out[outIdx+0]) << 24);
			uint32_t tmp68 = uint32_t(uint8_t(out[outIdx+1]) << 16);
			uint32_t tmp69 = uint32_t(uint8_t(out[outIdx+2]) << 8);
			uint32_t tmp70 = uint32_t(uint8_t(out[outIdx+3]) << 0);
			tmp66 = tmp67 | tmp68 | tmp69 | tmp70;
			outIdx+=4;
			for (uint32_t tmp71 = 0; tmp71 < tmp66; tmp71++) {
				Point tmp72;
				{
					{
						uint32_t tmp73 = uint32_t(uint8_t(out[outIdx+0]) << 24);
						uint32_t tmp74 = uint32_t(uint8_t(out[outIdx+1]) << 16);
						uint32_t tmp75 = uint32_t(uint8_t(out[outIdx+2]) << 8);
						uint32_t tmp76 = uint32_t(uint8_t(out[outIdx+3]) << 0);
						tmp72.X = tmp73 | tmp74 | tmp75 | tmp76;
						outIdx+=4;
					}
					{
						uint32_t tmp77 = uint32_t(uint8_t(out[outIdx+0]) << 24);
						uint32_t tmp78 = uint32_t(uint8_t(out[outIdx+1]) << 16);
						uint32_t tmp79 = uint32_t(uint8_t(out[outIdx+2]) << 8);
						uint32_t tmp80 = uint32_t(uint8_t(out[outIdx+3]) << 0);
						tmp72.Y = tmp77 | tmp78 | tmp79 | tmp80;
						outIdx+=4;
					}
				}
				retValue.Goal.push_back(tmp72);
			}
		}
		{
			{
				uint32_t tmp81 = uint32_t(uint8_t(out[outIdx+0]) << 24);
				uint32_t tmp82 = uint32_t(uint8_t(out[outIdx+1]) << 16);
				uint32_t tmp83 = uint32_t(uint8_t(out[outIdx+2]) << 8);
				uint32_t tmp84 = uint32_t(uint8_t(out[outIdx+3]) << 0);
				retValue.Boy.X = tmp81 | tmp82 | tmp83 | tmp84;
				outIdx+=4;
			}
			{
				uint32_t tmp85 = uint32_t(uint8_t(out[outIdx+0]) << 24);
				uint32_t tmp86 = uint32_t(uint8_t(out[outIdx+1]) << 16);
				uint32_t tmp87 = uint32_t(uint8_t(out[outIdx+2]) << 8);
				uint32_t tmp88 = uint32_t(uint8_t(out[outIdx+3]) << 0);
				retValue.Boy.Y = tmp85 | tmp86 | tmp87 | tmp88;
				outIdx+=4;
			}
		}
	}
	if (out != NULL) {
		free(out);
	}
	return retValue;
}

bool Go2Cpp_DoAction(std::string in0){
	std::string in;
	{
		uint32_t tmp5 = in0.length();
		char tmp6[4];
		tmp6[0] = (uint32_t(tmp5) >> 24) & 0xFF;
		tmp6[1] = (uint32_t(tmp5) >> 16) & 0xFF;
		tmp6[2] = (uint32_t(tmp5) >> 8) & 0xFF;
		tmp6[3] = (uint32_t(tmp5) >> 0) & 0xFF;
		in.append(tmp6, 4);
		in.append(in0);
	}
	char *out = NULL;
	int outLen = 0;
	Go2cppFn_Go2Cpp_DoAction((char *)in.data(), in.length(), &out, &outLen);
	bool retValue;
	int outIdx = 0;
	retValue = (bool) out[outIdx];
	outIdx++;
	if (out != NULL) {
		free(out);
	}
	return retValue;
}

bool Go2Cpp_GetIsGamePass(){
	std::string in;
	char *out = NULL;
	int outLen = 0;
	Go2cppFn_Go2Cpp_GetIsGamePass((char *)in.data(), in.length(), &out, &outLen);
	bool retValue;
	int outIdx = 0;
	retValue = (bool) out[outIdx];
	outIdx++;
	if (out != NULL) {
		free(out);
	}
	return retValue;
}


